pragma ever-solidity >= 0.62.0;

import "./MarketFeeOffer.tsol";
import "../../structures/IMarketBurnFeeStructure.tsol";
import "../../interfaces/IBurnTip3.tsol";
import "../../libraries/Gas.tsol";

import "tip3/contracts/interfaces/IBurnableTokenWallet.tsol";

abstract contract MarketBurnFeeOffer is MarketFeeOffer {

    function setMarketBurnFee(
        MarketBurnFee _fee,
        address _remainingGasTo
    )
        external
        onlyMarketRoot
        reserve
    {
        _setMarketBurnFee(_fee);
        _remainingGasTo.transfer({ value: 0, flag: 128 + 2, bounce: false });
    }

    function marketBurnFee()
        external
        view
        returns (optional(MarketBurnFee))
    {
        return _getMarketBurnFee();
    }

    function _retentionMarketFee(
        address _tokenWallet,
        uint128 _extraGasValue,
        uint128 _deployWalletGrams,
        uint128 _feeAmount,
        address _remainingGasTo
    )
        internal
        override
        view
    {
        TvmCell emptyPayload;
        optional(MarketBurnFee) burnFee = _getMarketBurnFee();
        if (burnFee.hasValue()) {
            uint128 burnFeeAmount = math.muldivc(_feeAmount, burnFee.get().numerator, burnFee.get().denominator);
            emit MarketFeeWithheld(_feeAmount - burnFeeAmount, _getPaymentToken());
            ITokenWallet(_tokenWallet).transfer{
                value: _deployWalletGrams + _extraGasValue,
                flag: 0,
                bounce: false
            }(
                _feeAmount - burnFeeAmount,
                _getMarketRootAddress(),
                _deployWalletGrams,
                _remainingGasTo,
                false,
                emptyPayload
            );

            IBurnableTokenWallet(_tokenWallet).burn{
                value: _extraGasValue,
                flag: 0,
                bounce: false
            }(
                burnFeeAmount,
                _getMarketRootAddress(),
                address(this),
                emptyPayload
            );
        } else {
            emit MarketFeeWithheld(_feeAmount, _getPaymentToken());
            ITokenWallet(_tokenWallet).transfer{
                value: _deployWalletGrams + _extraGasValue,
                flag: 0,
                bounce: false
            }(
                _feeAmount,
                _getMarketRootAddress(),
                _deployWalletGrams,
                _remainingGasTo,
                false,
                emptyPayload
            );

         }

    }

    function _tokensBurn()
         internal
         reserve
    {
        optional(MarketBurnFee) burnFee = _getMarketBurnFee();
        emit MarketFeeBurn(address(this), burnFee.get().burnRecipient, burnFee.get().project);
        IBurnTip3(burnFee.get().burnRecipient).burn{
            value: 0,
            flag: 128 + 2,
            bounce: false
        }(_getOwner(), burnFee.get().project);

    }

}
